header {
package generated
}

tokens [
    PLUS = "[+]";
    MINUS = "[-]";
    MUL = "[*]";
    POW = "[\\^]";
    LEFT = "[(]";
    RIGHT = "[)]";
    NUMBER = "[1-9][0-9]*";
    WS = "[ \t\n\r]+"
]

skip [
    WS;
]

start = E;

rules [
    E() -> value: Integer ::= t=T() eprime=EPRIME(t)
    {
        value = eprime
    }
    ;;

    EPRIME(acc: Integer) -> value: Integer ::= plus=PLUS t=T()
    {
        val down = acc + t
    }
    eprime=EPRIME(down)
    {
        value = eprime
    }

    | minus=MINUS t=T()
    {
      val down = acc - t
    }
    eprime=EPRIME(down)
    {
      value = eprime
    }

    | eps
    {
        value = acc
    }
    ;;

    T() -> value: Integer ::= p=P() tprime=TPRIME(p)
    {
        value = tprime
    }
    ;;

    TPRIME(acc: Integer) -> value: Integer ::= mul=MUL p=P()
    {
        val down = acc * p
    }
    tprime=TPRIME(down)
    {
        value = tprime
    }

    | eps
    {
        value = acc
    }
    ;;

    P() -> value: Integer ::= f=F() pprime=PPRIME(f)
    {
        value = pprime
    }
    ;;

    PPRIME(acc: Integer) -> value: Integer ::= pow=POW f=F() pprime=PPRIME(f)
    {
        value = Math.pow(acc.doubleValue(), pprime.doubleValue()).intValue()
    }

    | eps
    {
        value = acc
    }
    ;;

    F() -> value: Integer ::= numberstring=NUMBER
    {
        value = Integer.parseInt(numberstring.text)
    }

    | left=LEFT e=E() right=RIGHT
    {
        value = e
    }
    ;;
]
